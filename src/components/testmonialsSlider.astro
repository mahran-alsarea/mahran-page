---
import { Icon } from "astro-icon/components";
interface Props {
  testmoniels: { name: string; text: string; avatar: string }[];
}
const { testmoniels } = Astro.props;
---

<ul id="scroller">
  {
    testmoniels.map((testmonial, idx) => (
      <>
        <li id={`testmonial-${idx}`}>
          <p>{testmonial.text}</p>
          <figure>
            <Icon name={testmonial.avatar} />
            <figcaption>{testmonial.name}</figcaption>
          </figure>
        </li>
      </>
    ))
  }
  {
    /**  <button class="next">&gt;</button>
<button class="prev">&lt;</button>**/
  }
</ul>
<div class="slider-nav" data-testmonialsLenght={testmoniels.length - 1}>
  {
    testmoniels.map((_, idx) => (
      <a
        href={`#testmonial-${idx}`}
        aria-label={"show testmonial " + idx}
        aria-pressed={idx == 0 ? "true" : "false"}
        role="button"
      />
    ))
  }
</div>
<script>
  //  const maxValue =
  //    //@ts-expect-error
  //    document.querySelector(".slider-nav")?.dataset.testmonialslenght;
  //  function updateUrlParam(increment: boolean, maxValue: number) {
  //    const url = new URL(window.location.href);
  //    let paramValue = parseInt(url.hash.split("-")[1]) || 0;
  //
  //    if (increment) {
  //      paramValue = Math.min(paramValue + 1, maxValue);
  //    } else {
  //      paramValue = Math.max(paramValue - 1, 0);
  //    }
  //
  //    url.hash = `#testmonial-${paramValue}`;
  //    window.location.href = url.href;
  //    const radio = document.querySelector("#i" + url.hash.replace("#", ""));
  //    //@ts-expect-error
  //    radio.checked = true;
  //  }
  //
  //  // Add event listeners to .next and .prev buttons
  //  document.addEventListener("DOMContentLoaded", () => {
  //    const nextButton = document.querySelector(".next");
  //    const prevButton = document.querySelector(".prev");
  //
  //    nextButton?.addEventListener("click", () => updateUrlParam(true, maxValue));
  //    prevButton?.addEventListener("click", () =>
  //      updateUrlParam(false, maxValue),
  //    );
  //  });
</script>
<script>
  // via https://github.com/tootsuite/mastodon/blob/f59ed3a4fafab776b4eeb92f805dfe1fecc17ee3/app/javascript/mastodon/scroll.js
  const easingOutQuint = (x, t, b, c, d) =>
    c * ((t = t / d - 1) * t * t * t * t + 1) + b;

  function smoothScrollPolyfill(node, key, target) {
    const startTime = Date.now();
    const offset = node[key];
    const gap = target - offset;
    const duration = 1000;
    let interrupt = false;

    const step = () => {
      const elapsed = Date.now() - startTime;
      const percentage = elapsed / duration;

      if (interrupt) {
        return;
      }

      if (percentage > 1) {
        cleanup();
        return;
      }

      node[key] = easingOutQuint(0, elapsed, offset, gap, duration);
      requestAnimationFrame(step);
    };

    const cancel = () => {
      interrupt = true;
      cleanup();
    };

    const cleanup = () => {
      node.removeEventListener("wheel", cancel);
      node.removeEventListener("touchstart", cancel);
    };

    node.addEventListener("wheel", cancel, { passive: true });
    node.addEventListener("touchstart", cancel, { passive: true });

    step();

    return cancel;
  }

  function testSupportsSmoothScroll() {
    let supports = false;
    try {
      let div = document.createElement("div");
      div.scrollTo({
        top: 0,
        //@ts-expect-error
        get behavior() {
          supports = true;
          return "smooth";
        },
      });
    } catch (err) {} // Edge throws an error
    return supports;
  }

  const hasNativeSmoothScroll = testSupportsSmoothScroll();

  function smoothScroll(node, topOrLeft, horizontal) {
    if (hasNativeSmoothScroll) {
      return node.scrollTo({
        [horizontal ? "left" : "top"]: topOrLeft,
        behavior: "smooth",
      });
    } else {
      return smoothScrollPolyfill(
        node,
        horizontal ? "scrollLeft" : "scrollTop",
        topOrLeft,
      );
    }
  }

  function debounce(func, ms) {
    let timeout;
    return () => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        timeout = null;
        func();
      }, ms);
    };
  }

  const indicators = document.querySelectorAll(".slider-nav a");
  const scroller = document.querySelector("#scroller ");

  function setAriaLabels() {
    indicators.forEach((indicator, i) => {
      indicator.setAttribute("aria-label", `Scroll to item #${i + 1}`);
    });
  }

  function setAriaPressed(index) {
    index = Math.abs(index);
    indicators.forEach((indicator, i) => {
      indicator.setAttribute("aria-pressed", String(!!(i === index)));
    });
    window.location.assign(`#testmonial-${index}`);
  }

  indicators.forEach((indicator, i) => {
    indicator.addEventListener("click", (e) => {
      //e.preventDefault();
      e.stopPropagation();
      setAriaPressed(i);
      //@ts-expect-error
      const scrollLeft = Math.floor(scroller?.scrollWidth * (i / 4));
      smoothScroll(scroller, scrollLeft, true);
    });
  });

  scroller?.addEventListener(
    "scroll",
    debounce(() => {
      let index = Math.round((scroller.scrollLeft / scroller.scrollWidth) * 4);
      setAriaPressed(index);
    }, 50),
  );

  setAriaLabels();
</script>
<style>
  .next {
    font-size: 1.5rem;
    color: var(--icon-primary-accent-heavy, #f9710d);
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    left: 0.5rem;
    border: none;
    background: none;
  }
  .prev {
    font-size: 1.5rem;
    color: var(--icon-primary-accent-heavy, #f9710d);
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    right: 0.5rem;
    border: none;
    background: none;
  }
  ul {
    list-style: none;
    display: flex;
    justify-content: stretch;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scroll-behavior: smooth;
    -ms-overflow-style: none; /* Hide scrollbar IE and Edge */
    scrollbar-width: none; /* Hide scrollbar Firefox */
    height: 100%;
    /* width: 420px; */
  }
  li {
    color: gray;
    list-style: none;
    flex: 1 0 100%;
    scroll-snap-align: start;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    gap: 0.5rem;
    padding: 1rem;
    scroll-margin-top: 50dvh;
    position: relative;
  }
  .slider-nav {
    display: flex;
    column-gap: 0.5rem;
    position: absolute;
    bottom: 5%;
    left: 50%;
    transform: translateX(-50%);
    z-index: 1;
  }

  .slider-nav a {
    position: relative;
    width: 1rem;
    height: 1rem;
    border-radius: 50%;
    background-color: gray;
    border: black solid;
  }

  /*  for increasing clicable area  */
  .slider-nav a:before {
    content: "";
    position: absolute;
    width: 1rem;
    height: 2rem;
    top: -50%;
    cursor: pointer;
  }
  @media (hover: hover) and (pointer: fine) {
    .slider-nav a:hover {
      background-color: var(--icon-primary-accent-heavy, #f9710d);
      border: 4px var(--icon-primary-accent-heavy, #f9710d) solid;
    }
  }
  .slider-nav a[aria-pressed="true"] {
    background-color: var(--icon-primary-accent-heavy, #f9710d);
  }
  p {
    color: var(--text-primary-heavy, #212529);
    text-align: right;
    font-size: 1rem;
    font-weight: 400;
    line-height: 150%;
    line-break: auto;
  }
  [data-icon] {
    box-sizing: border-box;
    padding: 0.35rem;
    border-radius: 50%;
    background: var(--icon-secondary-accent-heavy, #006ba6);
    width: 48px;
    height: 48px;
  }
  figure {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  figcaption {
    color: var(--text-primary-accent-heavy, #f9710d);
    font-size: 1.5rem;
    font-weight: 400;
  }
  @media screen and (max-width: 720px) {
    .content-wrapper {
      width: 90%;
      gap: 2rem;
      position: absolute;
      bottom: -5%;
      left: 50%;
      transform: translateX(-50%);

      padding: revert;
      padding-block-start: 1rem;
      border-radius: var(--borderRadius-sm, 10px);
    }
  }
</style>
